Reports
=======

The ``reports`` app defines some generic PDF report functionalities as
well as the first application of these functionalities, namely a
legacy consumption report.  The legacy part of this app is outside the
scope of this section.

Models
------

.. autoclass:: gridplatform.reports.models.Report

Views
-----

Reports are generated by submitting a report specific form to a
specializaton of
:py:class:`~gridplatform.reports.views.StartReportView`.  If the
submitted form is valid a Celery task specific to the
:py:class:`~gridplatform.reports.views.StartReportView` specialization
is started.  Ajax is then used to query
:py:func:`~gridplatform.reports.views.status` for the status of the
task (which may be rendered in a progress bar, or by a spinner icon or
similar).  When :py:func:`~gridplatform.reports.views.status` reports
the task as completed, a
:py:class:`~gridplatform.reports.views.TaskForm` should be
submitted via Ajax to
:py:class:`~gridplatform.reports.views.FinalizeReportView` which then
generates the report and returns a JSON object that includes a URL to
:py:func:`~gridplatform.reports.views.serve` where the generated
report can be downloaded from.

.. autofunction:: gridplatform.reports.views.is_queue_too_long

.. autoclass:: gridplatform.reports.views.CeleryError
   :members: __init__

.. autoclass:: gridplatform.reports.views.StartReportView
   :members: get_task, get_task_data, start_task, form_valid, form_invalid

.. autoclass:: gridplatform.reports.views.TaskForm

.. autoclass:: gridplatform.reports.views.FinalizeReportView
   :members: generate_report, form_valid, form_invalid

.. autofunction:: gridplatform.reports.views.serve

.. autofunction:: gridplatform.reports.views.status

PDF Generation
--------------

PDF documents are generated by rendering a Django template into a
LaTex document and then compiling this into a PDF.

Errors in the LaTeX code is signalled via the
:py:class:`~gridplatform.reports.pdf.LatexError` exception.

Simple LaTex documents (without GNU Plots and free of Django
templates) are compiled via
:py:func:`~gridplatform.reports.pdf.compile_pdf`, which is implemented
in terms of :py:func:`~gridplatform.reports.pdf._compile_pdf`.

:py:func:`~gridplatform.reports.pdf._compile_pdf` is also used in
implementing :py:func:`~gridplatform.reports.pdf._generate_pdf` (which
renders a Django template into a LaTex file first).
:py:func:`~gridplatform.reports.pdf._generate_pdf` and
:py:func:`~gridplatform.reports.pdf._generate_gnuplot` is used for
implementing :py:func:`~gridplatform.reports.pdf.generate_pdf` which
is the general interface for generating PDFs using Django templates
(rendered into LaTex files) along with GNU plots.

.. autoclass:: gridplatform.reports.pdf.LatexError
   :members: __init__

.. autofunction:: gridplatform.reports.pdf.compile_pdf

.. autofunction:: gridplatform.reports.pdf._compile_pdf

.. autofunction:: gridplatform.reports.pdf.generate_pdf

.. autofunction:: gridplatform.reports.pdf._generate_pdf

.. autofunction:: gridplatform.reports.pdf._generate_gnuplot

.. autofunction:: gridplatform.reports.pdf.serve_pdf

.. autoclass:: gridplatform.reports.pdf.PDFTemplateResponse
   :members: rendered_content

.. autoclass:: gridplatform.reports.pdf.PDFDetailView
   :members: get_document_title, get_document_customer,
             get_document_type, get_context_meta, get_context_data

CSV Generation
--------------

CSV means comma separated values, which has stick to the text format
exported from MS Excell, even in Denmark (and other european
countries), where comma is used as decimal delimiter forcing
semi-colon to be used to seperate columns instead.

:py:func:`~gridplatform.reports.csv.generate_csv` converts data into a
CSV format and :py:func:`~gridplatform.reports.csv.serve_csv` is
implemented in terms of
:py:func:`~gridplatform.reports.csv.generate_csv` and returns a
:py:class:`django.http.HttpResponse` holding the CSV as its content.

.. autofunction:: gridplatform.reports.csv.generate_csv

.. autofunction:: gridplatform.reports.csv.serve_csv
